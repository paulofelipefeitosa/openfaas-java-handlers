BEGIN {
  printf("[PID, RET_VAL, START_TS, END_TS] <syscall> <pcomm>\n");
}

tracepoint:syscalls:sys_enter_clone 
{
  @start_clone[comm] = nsecs;
  @count_clone_exit[comm] = 0;
}

tracepoint:syscalls:sys_exit_clone / @start_clone[comm] /
{
  $end_clone = nsecs;
  @count_clone_exit[comm]++;
  if(args->ret == 0) {
    printf("[%d, %d, %lld, %lld] clone child %s\n", pid, args->ret, @start_clone[comm], $end_clone, comm);
  } else {
    printf("[%d, %d, %lld, %lld] clone father %s\n", pid, args->ret, @start_clone[comm], $end_clone, comm);
  }
  if(@count_clone_exit[comm] == 2) {
    delete(@start_clone[comm]);
    delete(@count_clone_exit[comm]);
  }
}

tracepoint:syscalls:sys_enter_execve 
{
  @start_execve[tid] = nsecs;
  @exec_filename[tid] = str(args->filename);
}

tracepoint:syscalls:sys_exit_execve / @start_execve[tid] /
{
  $end_execve = nsecs;
  printf("[%d, %d, %lld, %lld] execve %s\n", pid, args->ret, @start_execve[tid], $end_execve, @exec_filename[tid]);
  delete(@start_execve[tid]);
  delete(@exec_filename[tid]);
}
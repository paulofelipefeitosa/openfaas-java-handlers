import sys
import re

def get_list(line):
    str_list = line.split("[")[1].split("]: ")
    llist = map(lambda x: int(x), str_list)
    return llist

def get_clone_occ(line):
    if re.search("pid", line):
        llist = get_list(line)
        return [llist[0], -1, llist[1]]
    elif re.search("endts", line):
        llist = get_list(line)
        return [llist[0], llist[1], -1]
    else:
        raise Exception("Cannot match clone occurrence %s" % (line))

def get_exec_occ(line):
    if re.search("pid", line):
        llist = get_list(line)
        return [llist[0], -1, llist[1]]
    elif re.search("endts", line):
        llist = get_list(line)
        return [llist[0], llist[1], -1]
    else:
        raise Exception("Cannot match exec occurrence %s" % (line))

def add_entry(entries, entry):
    if entry[0] in entries:
        for i in xrange(1, len(entry)):
            if entries[entry[0]][i - 1] == -1:
                entries[entry[0]][i - 1] = entry[i]
    else:
        entries[entry[0]] = entry[1:]

def get_entry_by_pid(entries, pid):
    for x, y in entries.items():
        if y[1] == pid:
            return x, y
    raise Exception("Clone entry with pid=%d not found" % (pid))

def eprint(string):
    sys.stderr.write(string + "\n")

def print_metric(metric, exec_id, metric_value):
    print ("%s,%s,%s,%d" % (metric, exec_id, "0", metric_value))

def main():
    EXEC_ID = sys.argv[1]

    clone_entries = {}
    execve_entries = {}
    for line in sys.stdin:
        clone_match = re.search("@clone_child", line)
        execve_math = re.search("@exec_", line)
        if clone_match:
            entry = get_clone_occ(line)
            add_entry(clone_entries, entry)
            
        elif execve_math:
            entry = get_exec_occ(line)
            add_entry(execve_entries, entry)

    eprint("Clone entries %s" % (str(clone_entries)))
    eprint("Execve entries %s" % (str(execve_entries)))
    if len(execve_entries) == 1:
        for x, y in execve_entries.items():
            execve_pid = y[1]
            execve_sts = x
            execve_ets = y[0]
        clone_entry = get_entry_by_pid(clone_entries, execve_pid)
        clone_sts = clone_entry[0]
        clone_ets = clone_entry[1][0]
        print_metric("CloneEntry", EXEC_ID, clone_sts)
        print_metric("CloneExit", EXEC_ID, clone_ets)
        print_metric("ExecveEntry", EXEC_ID, execve_sts)
        print_metric("ExecveExit", EXEC_ID, execve_ets)
    else:
        raise Exception("Cannot identify an unique execve entry, entries size=%d" % (len(execve_entries)))

main()
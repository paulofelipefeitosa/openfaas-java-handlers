import sys
import re

def get_list(line):
    str_list = line.split("]")[0].split("[")[1].split(", ")
    llist = map(lambda x: int(x), str_list)
    return llist

def eprint(string):
    sys.stderr.write(string + "\n")

def print_metric(metric, exec_id, metric_value):
    print ("%s,%s,%s,%d" % (metric, exec_id, "0", metric_value))

def main():
    EXEC_ID = sys.argv[1]
    P_PROCESS_COMMAND = sys.argv[2]
    BIN_NAME = sys.argv[3]

    clone_list = []
    execve_list = []
    for line in sys.stdin:
        clone_match = re.search(" clone child %s" % (P_PROCESS_COMMAND), line)
        execve_math = re.search(" execve .*/%s" % (BIN_NAME), line)
        if clone_match:
            llist = get_list(line)
            ret_val = llist[1]
            if ret_val == 0:
                clone_list.append(llist)
        elif execve_math:
            execve_list = get_list(line)
            eprint("Found execve %s list: %s" % (BIN_NAME, str(execve_list)))
            break
    eprint("Clone lists %s" % (str(clone_list)))
    if not (execve_list == []):
        execve_pid = execve_list[0]
        final_clone_list = None
        for clone_rep in reversed(clone_list):
            clone_pid = clone_rep[0]
            if clone_pid == execve_pid:
                final_clone_list = clone_rep
                eprint("Found clone %s list: %s" % (BIN_NAME, str(final_clone_list)))
                break
        if final_clone_list:
            print_metric("CloneEntry", EXEC_ID, final_clone_list[2])
            print_metric("CloneExit", EXEC_ID, final_clone_list[3])
            print_metric("ExecveEntry", EXEC_ID, execve_list[2])
            print_metric("ExecveExit", EXEC_ID, execve_list[3])
        else:
            eprint("Could not identify clone to %s bin" % (BIN_NAME))
    else:
        eprint("Could not identify execve to %s bin" % (BIN_NAME))

main()